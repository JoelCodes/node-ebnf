"use strict";
var dist_1 = require('../dist');
var TestHelpers_1 = require('./TestHelpers');
var inspect = require('util').inspect;
var grammar = "\n{ ws=explicit }\nExpression ::= FunctionCall | Literal | Selector | Interpolation {ws=implicit}\nLiteral ::= Boolean | Null | String | Number | Integer | Date | Regex {ws=implicit}\nFunctionCall ::= Identifier FunctionArguments {ws=implicit}\nFunctionArguments ::= \"(\" ( Expression (WS* \",\" WS* Expression)* )? \")\" { pin=1, ws=implicit }\nSelector ::= Identifier\n\nIdentifier ::= RULE_UNQUOTED_STRING\n\nSTRING_CONTENT ::= \"\\\\$\" | [^$\"#x0000-#x001F]\nJSON_STRING ::= '\\\"' | [^#x0000-#x001F\"]\nRULE_UNQUOTED_STRING ::= [A-Za-z_][A-Za-z0-9_]*\nRULE_ANY_REGEX ::= \"/\" ( '\\/' | [^/] )* \"/\"\nNOT_PIPE ::= !\"|\" STRING_CONTENT\n\nDate ::= '|' NOT_PIPE+ '|' {pin=1}\n\nRegex ::= RULE_ANY_REGEX [gim]*\n\nWS ::= [#x20#x09#x0A#x0D]+\n\nInterpolation ::= '\"' InterpolationPart* '\"'\nInterpolationPart ::= InterpolationExpression | InterpolationVariable | InterpolationLiteral {fragment=true}\nInterpolationLiteral ::= STRING_CONTENT*\nInterpolationVariable ::= \"$\" Identifier {pin=1,fragment=true}\nInterpolationExpression ::= \"$(\" Expression \")\" {pin=1,fragment=true}\n\nBoolean ::= (\"true\" | \"false\") !RULE_UNQUOTED_STRING\nNull ::= \"null\" !RULE_UNQUOTED_STRING\nNumber ::= \"-\"? (\"0\" | [1-9] [0-9]*) (\".\" [0-9]+)? ((\"e\" | \"E\") ( \"-\" | \"+\" )? (\"0\" | [1-9] [0-9]*))?\nInteger ::= \"0\" | [1-9] [0-9]*\n\nString          ::= '\"' CHAR* '\"'\nESCAPE          ::= #x5C /* \\ */\nHEXDIG          ::= [a-fA-F0-9]\nESCAPABLE       ::= #x22 | #x5C | #x2F | #x62 | #x66 | #x6E | #x72 | #x74 | #x75 HEXDIG HEXDIG HEXDIG HEXDIG\nCHAR            ::= !\"$\" UNESCAPED | ESCAPE ESCAPABLE\nUNESCAPED       ::= [#x20-#x21] | [#x23-#x5B] | [#x5D-#xFFFF]\n  ";
describe('ATL', function () {
    describe('Grammars.Custom parses ATL Expressions', function () {
        var RULES = dist_1.Grammars.Custom.getRules(grammar);
        console.log('JSON:\n' + inspect(RULES, false, 20, true));
        var parser = new dist_1.Parser(RULES, {});
        TestHelpers_1.printBNF(parser);
        TestHelpers_1.testParseToken(parser, JSON.stringify(true, null, 2));
        TestHelpers_1.testParseToken(parser, '"$(var)"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"$var"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"asd"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"asd$var"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"asd$(true)"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, 'true', 'Literal');
        TestHelpers_1.testParseToken(parser, '123', 'Literal');
        TestHelpers_1.testParseToken(parser, '"asd"', 'Literal');
        TestHelpers_1.testParseToken(parser, 'null', 'Literal');
        TestHelpers_1.testParseToken(parser, '|2016-01-01|', 'Literal');
        TestHelpers_1.testParseToken(parser, 'true', 'Expression');
        TestHelpers_1.testParseToken(parser, '123', 'Expression');
        TestHelpers_1.testParseToken(parser, '"asd"', 'Expression');
        TestHelpers_1.testParseToken(parser, 'null', 'Expression');
        TestHelpers_1.testParseToken(parser, '|2016-01-01|', 'Expression');
        TestHelpers_1.testParseToken(parser, 'teta()', 'FunctionCall');
        TestHelpers_1.testParseToken(parser, 'teta(a)', 'FunctionCall');
        TestHelpers_1.testParseToken(parser, 'teta(a, b)', 'FunctionCall');
        TestHelpers_1.testParseToken(parser, 'teta(a, b)', 'Expression');
        TestHelpers_1.testParseToken(parser, 'teta( a , b, "text", |2016-10-01|, null, false, "agus$interpolation", "string", "str\\$ing")', 'Expression');
        TestHelpers_1.testParseToken(parser, 'teta(a(b()))', 'Expression');
        TestHelpers_1.testParseToken(parser, 'teta(a(b()))', 'FunctionCall');
        TestHelpers_1.testParseToken(parser, '"agus"', 'Expression');
        TestHelpers_1.testParseToken(parser, '"agus$interpolation"', 'Expression');
        TestHelpers_1.testParseToken(parser, '"$interpolation"', 'Expression');
        TestHelpers_1.testParseToken(parser, '"agus$interpolation"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"$interpolation"', 'Interpolation');
        TestHelpers_1.testParseToken(parser, '"agus\\$interpolation"', 'Expression');
        TestHelpers_1.testParseToken(parser, '"\\$interpolation"', 'Expression');
        TestHelpers_1.testParseToken(parser, '"$(var)"');
        TestHelpers_1.testParseToken(parser, '"$var"');
        TestHelpers_1.testParseToken(parser, '"asd"');
        TestHelpers_1.testParseToken(parser, '"asd$var"');
        TestHelpers_1.testParseToken(parser, '"asd$(true)"');
        TestHelpers_1.testParseToken(parser, 'true');
        TestHelpers_1.testParseToken(parser, '123');
        TestHelpers_1.testParseToken(parser, '"asd"');
        TestHelpers_1.testParseToken(parser, 'null');
        TestHelpers_1.testParseToken(parser, '|2016-01-01|');
        TestHelpers_1.testParseToken(parser, 'true');
        TestHelpers_1.testParseToken(parser, '123');
        TestHelpers_1.testParseToken(parser, '"asd"');
        TestHelpers_1.testParseToken(parser, 'null');
        TestHelpers_1.testParseToken(parser, '|2016-01-01|');
        TestHelpers_1.testParseToken(parser, 'teta()');
        TestHelpers_1.testParseToken(parser, 'teta(a)');
        TestHelpers_1.testParseToken(parser, 'teta(a, b)');
        TestHelpers_1.testParseToken(parser, 'teta(a, b)');
        TestHelpers_1.testParseToken(parser, 'teta( a , b, "text", |2016-10-01|, null, false, "agus$interpolation", "string", "str\\$ing")');
        TestHelpers_1.testParseToken(parser, 'teta(a(b()))');
        TestHelpers_1.testParseToken(parser, 'teta(a(b()))');
        TestHelpers_1.testParseToken(parser, '"agus"');
        TestHelpers_1.testParseToken(parser, '"agus$interpolation"');
        TestHelpers_1.testParseToken(parser, '"$interpolation"');
        TestHelpers_1.testParseToken(parser, '"agus$interpolation"');
        TestHelpers_1.testParseToken(parser, '"$interpolation"');
        TestHelpers_1.testParseToken(parser, '"agus\\$interpolation"');
        TestHelpers_1.testParseToken(parser, 'teta("hola $(false) $dia $(a(a))", a , b, "t$ext", |2016-10-01|, null, false, "agus$interpolation", "string", "str\$ing")');
    });
});
//# sourceMappingURL=ATL.spec.js.map